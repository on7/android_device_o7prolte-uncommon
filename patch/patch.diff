diff -ur a/packages/services/Telecomm/src/com/android/server/telecom/CallsManager.java b/packages/services/Telecomm/src/com/android/server/telecom/CallsManager.java
--- a/packages/services/Telecomm/src/com/android/server/telecom/CallsManager.java	Wed Apr 20 08:50:20 2016
+++ b/packages/services/Telecomm/src/com/android/server/telecom/CallsManager.java	Thu May 12 01:31:40 2016
@@ -48,6 +48,8 @@
 import android.telecom.PhoneAccountHandle;
 import android.telecom.TelecomManager;
 import android.telecom.VideoProfile;
+import android.telecom.PhoneAccountHandle;
+import android.telephony.SubscriptionManager;
 import android.telephony.PhoneNumberUtils;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
@@ -245,6 +247,8 @@
     private Call mPendingMOEmerCall = null;
     private Call mDisconnectingCall = null;
 
+    private AudioManager mAudioManager;
+
     /**
      * Initializes the required Telecom components.
      */
@@ -329,6 +333,8 @@
         mInCallWakeLockController = inCallWakeLockControllerFactory.create(context, this);
         mViceNotificationImpl = viceNotifier.create(mContext, this);
 
+        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
+
         mListeners.add(mInCallWakeLockController);
         mListeners.add(statusBarNotifier);
         mListeners.add(mCallLogManager);
@@ -348,6 +354,60 @@
         }
     }
 
+    private int getPhoneId(Call call) {
+        if (call.getTargetPhoneAccount() != null) {
+            PhoneAccountHandle account = call.getTargetPhoneAccount();
+            try {
+                int index = Integer.parseInt(account.getId());
+                int phoneId = SubscriptionManager.getPhoneId(index);
+                if (SubscriptionManager.isValidPhoneId(phoneId)) {
+                    return phoneId;
+                }
+            } catch (NumberFormatException e) {
+                Log.e(LOG_TAG, e, "Cannot get phoneId from ID value " + account.getId());
+            }
+        }
+        return -1;
+    }
+
+    private void setMSIMAudio(int oldState, int newState) {
+        Log.i(this, "setMSIMAudio %s -> %s", CallState.toString(oldState), CallState.toString(newState));
+        int mPhoneID = 0;
+        if(oldState == CallState.RINGING && newState == CallState.ACTIVE){
+            mPhoneID = getPhoneId(getForegroundCall());
+            if(mPhoneID == 0){
+                Log.i(this, "setMSIMAudio INCOMING CALL CP1");
+                mAudioManager.setParameters("phone_type=cp1");	
+            }else if (mPhoneID == 1){
+                Log.i(this, "setMSIMAudio INCOMING CALL CP2");
+                mAudioManager.setParameters("phone_type=cp2");	
+            }
+            Log.i(this, "setMSIMAudio INCOMING CALL REALCALL ON");
+            mAudioManager.setParameters("realcall=on");
+            mAudioManager.setSpeakerphoneOn(true);
+            mAudioManager.setSpeakerphoneOn(false);
+        }else if(oldState == CallState.DIALING && newState == CallState.DIALING){ /* OUTCALL */
+            mPhoneID = getPhoneId(getForegroundCall());
+            if(mPhoneID == 0){
+                Log.i(this, "setMSIMAudio OUT CALL CP1");
+                mAudioManager.setParameters("phone_type=cp1");	
+            }else if (mPhoneID == 1){
+                Log.i(this, "setMSIMAudio OUT CALL CP2");
+                mAudioManager.setParameters("phone_type=cp2");	
+            }
+            Log.i(this, "setMSIMAudio OUT CALL REALCALL ON");
+            mAudioManager.setParameters("realcall=on");
+            mAudioManager.setSpeakerphoneOn(true);
+            mAudioManager.setSpeakerphoneOn(false);
+        }else if(newState == CallState.DISCONNECTED){
+            Log.i(this, "setMSIMAudio DISCONNECTED OUT CALL REALCALL OFF");
+            mAudioManager.setParameters("realcall=off");
+        }else if(newState == CallState.ABORTED){
+            Log.i(this, "setMSIMAudio ABORTED OUT CALL REALCALL OFF");
+            mAudioManager.setParameters("realcall=off");
+        }
+    }
+
     ViceNotificationImpl getViceNotificationImpl() {
         return mViceNotificationImpl;
     }
@@ -2075,6 +2135,11 @@
             Trace.endSection();
         }
         manageDsdaInCallTones(false);
+
+        boolean setMsimAudioParams = SystemProperties.getBoolean("ro.telephony.samsung.realcall", false);
+        if (call != null && setMsimAudioParams) {
+            setMSIMAudio(oldState, newState);
+        }
     }
 
     private void updateCanAddCall() {

diff -ur a/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java b/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java
--- a/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java	Mon Jun 20 17:28:46 2016
+++ b/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java	Mon Jun 27 10:45:01 2016
@@ -1066,14 +1066,25 @@
                mSpeakerPhoneOn = true;
                Log.d(LOGTAG, "Audio source set it as speaker");
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_SPEAKER);
+			   mAudioManager.setParameters("fm_mode=on");
+               mAudioManager.setParameters("fm_radio_volume=on");
+               mAudioManager.setParameters("FMRadioVol=0.1496235728");
+               /* mAudioManager.setMode(AudioManager.MODE_IN_CALL); */
+               /* mAudioManager.setSpeakerphoneOn(true); */
            } else {
                Log.d(LOGTAG, "Audio source set it as headset");
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+			   mAudioManager.setParameters("fm_mode=on");
+               mAudioManager.setParameters("fm_radio_volume=on");
+               mAudioManager.setParameters("FMRadioVol=0.1496235728");
+               /* mAudioManager.setMode(AudioManager.MODE_IN_CALL); */
+               /* mAudioManager.setSpeakerphoneOn(false); */
            }
        } else {
                Log.d(LOGTAG, "A2DP is connected, set audio source to A2DP HS");
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_SPEAKER);
                mSpeakerPhoneOn = true;
+			   /* mAudioManager.setSpeakerphoneOn(true); */
        }
 
        mPlaybackInProgress = true;
@@ -1090,6 +1101,8 @@
        Log.d(LOGTAG, "In stopFM");
        configureAudioDataPath(false);
        mPlaybackInProgress = false;
+	   mAudioManager.setParameters("fm_radio_mute=1");
+       mAudioManager.setParameters("fm_mode=off");
        try {
            if ((mServiceInUse) && (mCallbacks != null))
                mCallbacks.onFmAudioPathStopped();
@@ -1539,6 +1552,7 @@
       public void run() {
          Log.v(LOGTAG, "Disabling Speaker");
          AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+		 /* mAudioManager.setSpeakerphoneOn(false); */
       }
    };
 
@@ -2257,6 +2271,7 @@
       if ( mSpeakerPhoneOn) {
           mSpeakerPhoneOn = false;
           AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+		  /* mAudioManager.setSpeakerphoneOn(false); */
       }
    }
 
@@ -2376,10 +2391,12 @@
             } else {
                 Log.d(LOGTAG, "A2DP is not connected, force none");
                 AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+				/* mAudioManager.setSpeakerphoneOn(false); */
             }
        } else if (speakerOn == true) {
            Log.d(LOGTAG, "enabling speaker");
            AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_SPEAKER);
+		   /* mAudioManager.setSpeakerphoneOn(true); */
        }
 
        Log.d(LOGTAG, "speakerOn completed:" + speakerOn);
@@ -2480,6 +2497,7 @@
       {
          mMuted = true;
          audioManager.setParameters("fm_mute=1");
+		 audioManager.setParameters("fm_radio_mute=1");
          if (mAudioTrack != null)
              mAudioTrack.setVolume(0.0f);
       }
@@ -2502,6 +2520,7 @@
       {
          mMuted = false;
          audioManager.setParameters("fm_mute=0");
+		 audioManager.setParameters("fm_radio_mute=0");
          if (mAudioTrack != null)
              mAudioTrack.setVolume(1.0f);
          if (mResumeAfterCall)
