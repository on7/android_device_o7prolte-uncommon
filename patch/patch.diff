diff -ur a/packages/services/Telecomm/src/com/android/server/telecom/CallAudioManager.java b/packages/services/Telecomm/src/com/android/server/telecom/CallAudioManager.java
--- a/packages/services/Telecomm/src/com/android/server/telecom/CallAudioManager.java	Wed Apr 20 08:50:20 2016
+++ b/packages/services/Telecomm/src/com/android/server/telecom/CallAudioManager.java	Thu May 12 01:31:40 2016
@@ -31,6 +31,27 @@
 import java.util.Set;
 import java.util.LinkedHashSet;
 
+import android.app.ActivityManagerNative;
+import android.content.Context;
+import android.content.pm.UserInfo;
+import android.media.AudioManager;
+import android.os.Binder;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Looper;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+
+import android.telecom.PhoneAccountHandle;
+import android.telephony.SubscriptionManager;
+
+import com.android.internal.util.Preconditions;
+
+import java.util.Objects;
+
 public class CallAudioManager extends CallsManagerListenerBase {
 
     public interface AudioServiceFactory {
@@ -56,6 +77,10 @@
     private Call mForegroundCall;
     private boolean mIsTonePlaying = false;
     private InCallTonePlayer mHoldTonePlayer;
+	
+	private AudioManager mAudioManager;
+	boolean setMsimAudioParams;
+	boolean setSamsungRealcallParams;
 
     public CallAudioManager(CallAudioRouteStateMachine callAudioRouteStateMachine,
             CallsManager callsManager,
@@ -86,6 +111,27 @@
 
         mPlayerFactory.setCallAudioManager(this);
         mCallAudioModeStateMachine.setCallAudioManager(this);
+		
+		mAudioManager = (AudioManager) mCallsManager.mContext.getSystemService(Context.AUDIO_SERVICE);
+		
+		setMsimAudioParams = SystemProperties.getBoolean("ro.multisim.set_audio_params", false);
+		setSamsungRealcallParams = SystemProperties.getBoolean("ro.telephony.samsung.realcall", false);
+    }
+	
+	private int getPhoneId(Call call) {
+         if (call.getTargetPhoneAccount() != null) {
+             PhoneAccountHandle account = call.getTargetPhoneAccount();
+            try {
+                 int index = Integer.parseInt(account.getId());
+                 int phoneId = SubscriptionManager.getPhoneId(index);
+                 if (SubscriptionManager.isValidPhoneId(phoneId)) {
+                     return phoneId;
+                 }
+             } catch (NumberFormatException e) {
+                 Log.e(this, e, "Cannot get phoneId from ID value " + account.getId());
+             }
+         }
+         return -1;
     }
 
     @Override
@@ -103,7 +149,27 @@
         if (mCallStateToCalls.get(newState) != null) {
             mCallStateToCalls.get(newState).add(call);
         }
-
+		
+		Call callm = getForegroundCall();
+		if(newState == CallState.ACTIVE){
+			if(setSamsungRealcallParams){
+				mAudioManager.setParameters("realcall=on");
+			}
+			if(setMsimAudioParams){
+				int phoneId = getPhoneId(callm);
+				if (phoneId == 0) {
+					mAudioManager.setParameters("phone_type=cp1");
+				} else if (phoneId == 1) {
+					mAudioManager.setParameters("phone_type=cp2");
+				}
+			}
+ 		}
+		if(newState == CallState.ABORTED || newState == CallState.DISCONNECTED){
+			if(setSamsungRealcallParams){
+				mAudioManager.setParameters("realcall=off");
+			}
+		}			
+          
         updateForegroundCall();
         if (newState == CallState.DISCONNECTED) {
             playToneForDisconnectedCall(call);

diff -ur a/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java b/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java
--- a/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java	Mon Jun 20 17:28:46 2016
+++ b/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java	Mon Jun 27 10:45:01 2016
@@ -62,6 +62,8 @@
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -134,6 +136,8 @@
     private WindowManagerInternal mWindowManagerInternal;
     private InputManagerInternal mInputManagerInternal;
     private IMediaProjectionManager mProjectionService;
+	
+	public static final String TS_PATH = "/sys/class/input/input3/enabled";
 
     // The synchronization root for the display manager.
     // This lock guards most of the display manager's state.
@@ -697,6 +701,36 @@
         }
         scheduleTraversalLocked(false);
     }
+	
+	 // Writes to sysfs node, returns true if success, false if fail
+     private boolean write_sysfs(String path, boolean on) {
+        try {
+            FileOutputStream fos = new FileOutputStream(path);
+            byte[] bytes = new byte[2];
+            bytes[0] = (byte)(on ? '1' : '0');
+            bytes[1] = '\n';
+            fos.write(bytes);
+            fos.close();
+        } catch (Exception e) {
+            Slog.i(TAG, "Fail: " + e.getLocalizedMessage());
+            return false;
+        }
+        return true;
+    }
+	
+	// Enables or disables input devices by writing to sysfs path
+    private void enableDevices(boolean enable) {
+        boolean ret;
+        if(enable) {
+            // Turn on touch input
+            ret = write_sysfs(TS_PATH, true);
+            Slog.i(TAG, "Enabled touchscreen, success? " + ret);
+        } else {
+            // Turn off touch input
+            ret = write_sysfs(TS_PATH, false);
+            Slog.i(TAG, "Disabled touchscreen, success? " + ret);
+        }
+    }
 
     private void handleDisplayDeviceChanged(DisplayDevice device) {
         synchronized (mSyncRoot) {
@@ -710,6 +744,14 @@
             if (diff == DisplayDeviceInfo.DIFF_STATE) {
                 Slog.i(TAG, "Display device changed state: \"" + info.name
                         + "\", " + Display.stateToString(info.state));
+						
+				if(info.state == Display.STATE_ON){
+					enableDevices(true);
+				}
+				if (info.state == Display.STATE_OFF) {
+					enableDevices(false);
+				}		
+						
             } else if (diff != 0) {
                 Slog.i(TAG, "Display device changed: " + info);
             }
